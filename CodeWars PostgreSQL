CodeWars

-----------------------------------
8 kyu                                                 
Count Odd Numbers below n

SELECT n, n/2 AS res
FROM oddcount;
-----------------------------------

-----------------------------------
8 kyu 
Get Nth Even Number

SELECT n, (-2 + n*2) AS res
FROM ntheven;
-----------------------------------

-----------------------------------
8 kyu 
Function 2 - squaring an argument

SELECT n, n*n AS res
FROM square;
-----------------------------------

-----------------------------------
8 kyu 
Will you make it?

SELECT distance_to_pump, mpg, fuel_left, CASE 
WHEN mpg*fuel_left >= distance_to_pump THEN true ELSE false END AS res
FROM zerofuel;
-----------------------------------

-----------------------------------
8 kyu 
SQL Basics: Mod

SELECT number1 % number2 AS mod
FROM decimals;
-----------------------------------

-----------------------------------
8 kyu
Third Angle of a Triangle

SELECT a, b, 180-a-b AS res
FROM otherangle;
-----------------------------------

-----------------------------------
8 kyu 
Easy SQL: Square Root and Log

SELECT SQRT(number1) AS root, LOG(number2) AS log
FROM decimals;
-----------------------------------

-----------------------------------
8 kyu
Easy SQL: Rounding Decimals

SELECT FLOOR(number1) AS number1, CEILING(number2) AS number2
FROM decimals;
-----------------------------------

-----------------------------------
8 kyu
Collect Tuition (SQL for Beginners #4)

SELECT name, age, semester, mentor, tuition_received
FROM students
WHERE tuition_received = false;
-----------------------------------

-----------------------------------
8 kyu
Register for the Party (SQL for Beginners #3)

INSERT INTO participants(name, age, attending) VALUES('Paul', 21, true);

SELECT *
FROM participants;
-----------------------------------

-----------------------------------
8 kyu
On the Canadian Border (SQL for Beginners #2)

SELECT *
FROM travelers
WHERE country != 'USA' AND country != 'Canada' AND country != 'Mexico';
-----------------------------------

-----------------------------------
8 kyu
SQL Basics: Simple MIN / MAX

SELECT MAX(age) AS age_max, MIN(age) AS age_min
FROM people;
-----------------------------------

-----------------------------------
8 kyu
SQL Basics: Simple WHERE and ORDER BY

SELECT * 
FROM people
WHERE age > 50
ORDER BY age DESC;
-----------------------------------

-----------------------------------
8 kyu
Easy SQL - Ordering

SELECT * 
FROM companies
ORDER BY employees DESC;
-----------------------------------

-----------------------------------
8 kyu
Remove exclamation marks

SELECT s, REPLACE(s, '!', '') AS res
FROM removeexclamationmarks;
-----------------------------------

-----------------------------------
8 kyu
SQL Basics: Simple DISTINCT

SELECT DISTINCT(age)
FROM people;
-----------------------------------

-----------------------------------
8 kyu
SQL Basics: Simple SUM

SELECT SUM(age) AS age_sum
FROM people;
-----------------------------------

-----------------------------------
8 kyu
Factorial Fun: Using PostgreSQL to Generate a Table of Factorials

prepare generate_factorial(int) as
-- Your SQL here

SELECT n, factorial(n)::INT AS result 
FROM generate_series(1,$1) AS n;
-----------------------------------

-----------------------------------
7 kyu
Parameterized SQL: Section Access Control

prepare find_sections (integer) as
SELECT id, section_name
FROM section_access
WHERE ',' || user_access || ',' LIKE '%,' || $1::text || ',%' 
ORDER BY id;
-----------------------------------

-----------------------------------
7 kyu 
Order Error Rate Over the Past Hour

SELECT ROUND((SELECT COUNT(*) * 100.0 FROM  order_errors WHERE order_time + '60 minutes' > NOW()) / NULLIF((SELECT COUNT(*) FROM order_processing WHERE order_time + '60 minutes' > NOW()), 0), 2) AS error_percentage
-----------------------------------

-----------------------------------
7 kyu
Sorting Madness: part 4

SELECT id, group_id, recipe, priority
FROM recipe_priority
ORDER BY group_id ASC, MAX(priority) OVER (PARTITION BY group_id, recipe) DESC, recipe ASC, priority DESC, id DESC;
-----------------------------------

-----------------------------------
7 kyu
Genre Analysis with PostgreSQL Arrays

SELECT DISTINCT(UNNEST(genres)) AS genre, COUNT(title) AS count, ARRAY_AGG(title ORDER BY title) AS books
FROM books
GROUP BY genre
ORDER BY count DESC, genre;
-----------------------------------

-----------------------------------
7 kyu
Hosts Missing Specific Software Title and Having Recent Installations

SELECT host
FROM host_software
GROUP BY host
HAVING EVERY(software_title != 'Title2') AND MAX(install_date) >= CURRENT_DATE - INTERVAL '1 year'
ORDER BY host;
-----------------------------------

-----------------------------------
7 kyu
Cats and shelves

SELECT a, b, (b - a)%3 + (b - a)/3 AS res
FROM jumps;
-----------------------------------

-----------------------------------
7 kyu 
Vowel Count

SELECT str, LENGTH(TRANSLATE(str,'bcdfghjklmnpqrstwvxyz ','')) AS res 
FROM getcount;
-----------------------------------

-----------------------------------
7 kyu 
ASCII Patterns Using SQL: part 2

prepare alternate_star_and_number(int) as
SELECT CASE 
WHEN i%2=0 THEN (i/2)::TEXT 
ELSE REPEAT('*',i/2+1) END AS pattern
FROM GENERATE_SERIES(1,$1) AS t(i);
-----------------------------------

-----------------------------------
7 kyu
ASCII Patterns Using SQL: part 1

SELECT REPEAT('*', i) AS star_pattern
FROM GENERATE_SERIES($1, 1, -1) AS t(i);
-----------------------------------

-----------------------------------
7 kyu
Disemvowel Trolls

SELECT str, TRANSLATE(str, 'aeuioAEUIO', '') AS res
FROM disemvowel;
-----------------------------------

-----------------------------------
7 kyu
Top-Scoring Students for Each Subject

SELECT DISTINCT ON (subject_id) ARRAY_AGG(student_name ORDER BY student_id ASC) AS student_names, su.subject_name, m.mark_rate
FROM marks AS m JOIN students AS s USING(student_id)
JOIN subjects AS su USING(subject_id)
GROUP BY m.subject_id, m.mark_rate, su.subject_name
ORDER BY m.subject_id ASC, m.mark_rate DESC;
-----------------------------------

-----------------------------------
7 kyu
Top-Scoring Students Across All Subjects

SELECT s.student_id, s.student_name
FROM students AS s JOIN marks AS m USING(student_id)
GROUP BY s.student_id, s.student_name
HAVING EVERY(m.mark_rate = (SELECT MAX(mark_rate) FROM marks WHERE subject_id = m.subject_id))
ORDER BY s.student_id DESC;
-----------------------------------

-----------------------------------
7 kyu
Triangular Treasure

SELECT n, CASE WHEN n > 0 THEN (n * (n+1)) / 2  ELSE 0 END AS res
FROM triangular;
-----------------------------------

-----------------------------------
7 kyu
Sales Analysis for the Previous Week

SELECT c.category_name AS category_name, COUNT(sale_id) AS total_products_sold, SUM(s.amount) AS total_sales_amount
FROM categories AS c JOIN products AS p USING(category_id)
JOIN sales AS s USING(product_id)
WHERE s.sale_date >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week') AND s.sale_date < DATE_TRUNC('week', CURRENT_DATE)
GROUP BY c.category_name
ORDER BY total_products_sold DESC, total_sales_amount DESC, c.category_name ASC;
-----------------------------------

-----------------------------------
7 kyu
Employees and managers: Part 1

SELECT manager_id, 
                ARRAY_AGG(name || ' ('|| id::text ||')' ORDER BY id) AS employee_names
FROM employees
WHERE manager_id IS NOT NULL 
Group BY manager_id
ORDER BY manager_id;
-----------------------------------

-----------------------------------
6 kyu
Generation Categorization

SELECT 
    id, 
    name, 
    birthdate, 
    COALESCE(
        (SELECT 'Generation Z' WHERE birthdate >= '1997-01-01' AND birthdate <= '2012-12-31'),
        (SELECT 'Millennials' WHERE birthdate >= '1981-01-01' AND birthdate <= '1996-12-31'),
        (SELECT 'Generation X' WHERE birthdate >= '1965-01-01' AND birthdate <= '1980-12-31'),
        (SELECT 'Baby Boomers' WHERE birthdate >= '1946-01-01' AND birthdate <= '1964-12-31'),
        (SELECT 'Silent Generation' WHERE birthdate >= '1928-01-01' AND birthdate <= '1945-12-31'),
        (SELECT 'Greatest Generation' WHERE birthdate < '1928-01-01')
    ) AS generation
FROM users
ORDER BY id ASC;
-----------------------------------

-----------------------------------
6 kyu
SQL Basics: Simple IN

SELECT id, name
FROM departments
WHERE id IN (
    SELECT department_id
    FROM sales
    WHERE price > 98
);
-----------------------------------

-----------------------------------
6 kyu
Sneaky student #1

';SELECT * 
FROM students s 
WHERE s.group='K-12' 
ORDER BY name ASC--
-----------------------------------



-----------------------------------
5 kyu
SQL Tuning: Function Calls

CREATE TABLE precalculated_pct_increase (
    department_id INT PRIMARY KEY,
    pct_increase DECIMAL(5, 4)
);

INSERT INTO precalculated_pct_increase (department_id, pct_increase)
SELECT department_id, pctIncrease(department_id)
FROM departments;

SELECT 
    e.employee_id,
    e.first_name,
    e.last_name,
    d.department_name,
    e.salary AS old_salary,
    e.salary * (1 + p.pct_increase) AS new_salary
    
FROM employees e LEFT JOIN departments d 
ON e.department_id = d.department_id

LEFT JOIN precalculated_pct_increase p 
ON e.department_id = p.department_id

ORDER BY e.employee_id ASC;
-----------------------------------

-----------------------------------
5 kyu
SQL Basics: Simple Hierarchical structure

WITH RECURSIVE employee_levels(level, id, first_name, last_name, manager_id) AS 
(
  SELECT 1, 
          id, 
            first_name, 
                      last_name, 
                                manager_id
  FROM employees
  WHERE manager_id IS NULL
  
  UNION ALL
  
  SELECT el.level + 1,
                      e.id, 
                          e.first_name, 
                                      e.last_name, 
                                                  e.manager_id
  FROM employees e INNER JOIN 
  employee_levels el 
  ON e.manager_id = el.id
)

SELECT * 
FROM employee_levels 
ORDER BY level, 
              id;
-----------------------------------

